#!/usr/bin/env bash
set -o pipefail

# generic 
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"
DOTFILES_DIR=${DOTFILES_DIR%/}
DOTFILES_TARGET_DIR="${DOTFILES_TARGET_DIR:-$HOME}" # note that the target in ln terminology is the opposite, i.e. the target of the link. 
DOTFILES_TARGET_DIR=${DOTFILES_TARGET_DIR%/}


GETOPT="getopt"
FIND="find -H"
FIND_OPTS=( $DOTFILES_FIND_OPTS )

[[ -n "$DOTFILES_MAXDEPTH" ]] && FIND_OPTS+=( ${DOTFILES_MAXDEPTH:+-maxdepth $DOTFILES_MAXDEPTH} )
FIND_OPTS+=( -path '*.git' -prune -o )
IGNORE_PATTERN="*${DOTFILES_IGNORE_SUFFIX-.ignore}"
[[ -n "$IGNORE_PATTERN" ]] && FIND_OPTS+=( -path "$IGNORE_PATTERN" -prune -o )

die() {
	echo "$@" >&2
	exit 1
}

link_file(){
  local target linkname str
  target="$1" linkname="$2" # here target and linkname follow ln terminology
  str=""$linkname" -> "$target""
  bn=$(basename "$linkname")
  if [[ ! -e "$linkname" ]]; then
    ln -s  "$target" "$linkname" || die "Unable to create link "$linkname" -> "$target""
    echo $str; return 
  elif [[ "$target" == $(realpath "$linkname") ]]; then
    return
  fi
  
  local action
	if [[ ! -n $if_exists ]]; then
    [[ -t 0 ]] || die "Interactive shell required"
    read -r -p ""$bn" already exists, [s]kip, [o]verwrite?" action
  fi
  case ${if_exists:-$action} in
    o)    ln -fs "$target" "$linkname" || die "Unable to create link "$linkname" -> "$target""
          echo "$str"; return;;
    s)    return;;
    *)    die "Wrong input: [s]kip, [o]verwrite"
  esac
}

cmd_link() {
  local opts
  local symlink_pattern symlink_all_pattern if_exists
  symlink_pattern="*.symlink"
  symlink_all_pattern="*.symlink_all"
  opts="$($GETOPT -o so -l skip,overwrite,symlink-suffix:,symlink-all-suffix: -n "$PROGRAM" -- "$@")"
	local err=$?
	eval set -- "$opts"
	while true; do case $1 in
    -s|--skip) if_exists="s"; shift ;;
    -o|--overwrite) if_exists="o"; shift ;;
		--symlink-suffix) symlink_pattern="*$2"; shift 2;;
		--symlink-all-suffix) symlink_all_pattern="*$2"; shift 2;;
		--) shift; break ;;
	esac done

	[[ $err -ne 0 || $# -gt 1 ]] && die "Usage: $PROGRAM $COMMAND [--symlink-suffix .suffix] [--symlink-all-suffix .suffix] [--skip,-s | --overwrite,-o] [id]"
  local id root
  [[ $# -eq 1 ]] && id=$1
  root="$DOTFILES_DIR/${id%/}"
  
  echo "Creating links in "$DOTFILES_TARGET_DIR" to "$root""
  [[ -d "$DOTFILES_TARGET_DIR" ]] || die "Target directory $DOTFILES_TARGET_DIR missing"
  [[ -d "$root" ]] || die "dotfiles directory $root missing"
  
  while read -r -d "" dir; do
    while read -r -d "" file; do
      link_file "$file" ""$DOTFILES_TARGET_DIR"/.$(basename "${dir%.*}")/$(basename "$file")" 
    done< <(find -H "$dir" -maxdepth 1 -mindepth 1 -path '*.git' -prune -o -print0)
	done < <($FIND "$root" "${FIND_OPTS[@]}" -name "$symlink_all_pattern" -print0)

  while read -r -d "" file; do
    link_file "$file" ""$DOTFILES_TARGET_DIR"/.$(basename "${file%.*}")" 
  done< <($FIND "$root" "${FIND_OPTS[@]}" -path "$symlink_all_pattern" -prune -o -name "$symlink_pattern" -print0)
}

PROGRAM="cfg-manager"
COMMAND="$1"

case "$1" in
  link) shift;        cmd_link "$@";;
  install) shift      cmd_install "$@";;
  *)                  die "Usage: $PROGRAM [link|install] [options] [id]";;
esac
exit 0
