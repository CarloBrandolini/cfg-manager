#!/usr/bin/env bash
set -o pipefail

# generic 
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"
DOTFILES_DIR=${DOTFILES_DIR%/}


GETOPT="getopt"
FIND="find -H"
FIND_OPTS=( $DOTFILES_FIND_OPTS )

[[ -n "$DOTFILES_MAXDEPTH" ]] && FIND_OPTS+=( ${DOTFILES_MAXDEPTH:+-maxdepth $DOTFILES_MAXDEPTH} )
FIND_OPTS+=( -path '*.git' -prune -o )
IGNORE_PATTERN="*${DOTFILES_IGNORE_SUFFIX-.ignore}"
[[ -n "$IGNORE_PATTERN" ]] && FIND_OPTS+=( -path "$IGNORE_PATTERN" -prune -o )

die() {
	echo "$@" >&2
	exit 1
}

report () { 
	echo "$@" >&2
}

overwrite_link() {
  local target linkname
  target="$1" linkname="$2"
  [[ -d "$linkname" ]] && die "$linkname is a directory. Remove it before using it as the source of the link" 
  # ln -fsn "$target" "$linkname" # the -n ensures the directory is removed, but better let the user delete it...
  ln -fs "$target" "$linkname" || report "Unable to create link $str"
}

link_file(){
  local target linkname str
  target="$1" linkname="$2" # here target and linkname follow ln terminology
  str=""$linkname" -> "$target""
  bn=$(basename "$linkname")
  if [[ ! -e "$linkname" ]]; then
    ln -s  "$target" "$linkname" || report "Unable to create link $str"; return
    echo $str; return 
  elif [[ "$target" == $(realpath "$linkname") ]]; then
    return
  fi
  
  local action
	if [[ ! -n $if_exists ]]; then
    [[ -t 0 ]] || die "Interactive shell required"
    read -r -p ""$bn" already exists, [s]kip, [o]verwrite?" action
  fi
  case ${if_exists:-$action} in
    o)    overwrite_link "$target" "$linkname"; return;;
    s)    return;;
    *)    die "Wrong input: [s]kip, [o]verwrite"
  esac
}

cmd_link() {
  local target_dir="$HOME" # note that the target in ln terminology is the opposite, i.e. the target of the link. 
  local symlink_pattern="*.symlink"
  local symlink_all_pattern="*.symlink_all"
  local if_exists

  local opts="$($GETOPT -o so -l skip,overwrite,symlink-suffix:,symlink-all-suffix:,target-dir: -n "$PROGRAM" -- "$@")"
	local err=$?
	eval set -- "$opts"
	while true; do case $1 in
    -s|--skip)                      if_exists="s"; shift ;;
    -o|--overwrite)                 if_exists="o"; shift ;;
		--symlink-suffix)               symlink_pattern="*$2"; shift 2;;
		--symlink-all-suffix)           symlink_all_pattern="*$2"; shift 2;;
    --target-dir)                   target_dir="${2%/}"; shift 2;;
		--) shift; break ;;
	esac done

	[[ $err -ne 0 || $# -gt 1 ]] && die "Usage: $PROGRAM $COMMAND [--symlink-suffix .suffix] [--symlink-all-suffix .suffix] [--skip,-s | --overwrite,-o] [id]"
  local id root
  [[ $# -eq 1 ]] && id=$1
  root="$DOTFILES_DIR/${id%/}"
  
  echo "Creating links in "$target_dir" to "$root""
  [[ -d "$target_dir" ]] || die "Target directory $target_dir missing"
  [[ -d "$root" ]] || die "dotfiles directory $root missing"
  
  while read -r -d "" dir; do
    while read -r -d "" file; do
      link_file "$file" ""$target_dir"/.$(basename "${dir%.*}")/$(basename "$file")" 
    done< <(find -H "$dir" -maxdepth 1 -mindepth 1 -path '*.git' -prune -o -print0)
	done < <($FIND "$root" "${FIND_OPTS[@]}" -name "$symlink_all_pattern" -print0)

  while read -r -d "" file; do
    link_file "$file" ""$target_dir"/.$(basename "${file%.*}")" 
  done< <($FIND "$root" "${FIND_OPTS[@]}" -path "$symlink_all_pattern" -prune -o -name "$symlink_pattern" -print0)
}

cmd_inject() {
  local opts="$($GETOPT -o d -l target-file:,suffix:,line-prefix:,prepend -n "$PROGRAM" -- "$@")"
  local err=$?
  local pattern target_file line_prefix prepend

	eval set -- "$opts"
	while true; do case $1 in
    --suffix)       pattern="*$2"; shift 2;;
		--target-file)  target_file="$2"; shift 2;;
		--line-prefix)  line_prefix="$2"; shift 2;;
		--prepend)      prepend="yes"; shift;;
		--)             shift; break ;;
	esac done

  [[ -n $pattern && -n $target_file ]] || die "Usage: $PROGRAM $COMMAND --suffix .suffix --target-file file [--prepend] [id]"

  [[ $err -ne 0 || $# -gt 1 ]] && die "Usage: $PROGRAM $COMMAND --suffix .suffix --target-file file [--prepend] [id]"
  [[ $# -eq 1 ]] && local id=$1
  local root="$DOTFILES_DIR/${id%/}"

  local str
  [[ -e "$target_file" ]] && local file_content=$(<"$target_file")
  while read -r -d "" file; do
    local bn=$(basename "${file%.*}")
    tag_open="$TAG_OPEN "$bn""
    tag_close="$TAG_CLOSE "$bn""
    ( [[ -n "$file_content" ]] && grep -q "$tag_open" <<< "$file_content" ) && continue
    local to_inject=$(<"$file")
    [[ -n $line_prefix ]] && str+="$line_prefix"
    str+=$(printf "%s\n$to_inject\n%s" "$tag_open" "$tag_close")
    str+=$'\n\n'
  done < <($FIND "$root" "${FIND_OPTS[@]}" -name "$pattern" -print0)
  [[ -n $str ]] || return
  if [[ -n $prepend ]];then
    printf "%s%s" "$str" "$file_content" > "$target_file"
  else
    printf "$str" >> "$target_file"
  fi
}

cmd_install() {
  local opts="$($GETOPT -o d -l file-name: -n "$PROGRAM" -- "$@")"
	local err=$?
  local file_name

	eval set -- "$opts"
	while true; do case $1 in
    --file-name)  file_name="$2"; shift 2;;
		--)           shift; break ;;
	esac done

  [[ -n $file_name ]] || die "Usage: $PROGRAM $COMMAND --file-name file-name [id]"

  [[ $err -ne 0 || $# -gt 1 ]] && die "Usage: $PROGRAM $COMMAND --file-name file-name [id]"
  local id root
  [[ $# -eq 1 ]] && id=$1
  root="$DOTFILES_DIR/${id%/}"
  
  while read -r -d "" file; do
    source "$file" 
  done< <($FIND "$root" "${FIND_OPTS[@]}" -name "$file_name" -print0)
}

PROGRAM="cfg-manager"
TAG_OPEN="# --$PROGRAM--TAG-OPEN"
TAG_CLOSE="# --$PROGRAM--TAG-CLOSE"

COMMAND="$1"

case "$1" in
  link) shift;          cmd_link "$@";;
  inject) shift;        cmd_inject "$@";;
  install) shift;        cmd_install "$@";;
  *)                    die "Usage: $PROGRAM link [options] [id]";;
esac
exit 0
